#set breakpoint before allocate function
Note: breakpoints 1, 5 and 8 also set at pc 0x555555554692.
Breakpoint 13 at 0x555555554692: file sigseg05.c, line 31.
#set breakpoint on allocate function and also on the end of function
#so we can observe stack and variables
Note: breakpoints 2, 6, 7 and 9 also set at pc 0x5555555546c2.
Breakpoint 14 at 0x5555555546c2: file sigseg05.c, line 36.
Note: breakpoints 3 and 10 also set at pc 0x5555555546d8.
Breakpoint 15 at 0x5555555546d8: file sigseg05.c, line 39.
#let's start
Starting program: /home/nedo/Desktop/program 

Breakpoint 1, main () at sigseg05.c:32
32		allocate(A);
10: $sp = (void *) 0x7fffffffdef0
11: $bp = -8448
13: /a $bp = 0xffffffffffffdf00
Dump of assembler code for function main:
   0x000055555555468a <+0>:	push   %rbp
   0x000055555555468b <+1>:	mov    %rsp,%rbp
   0x000055555555468e <+4>:	sub    $0x10,%rsp
=> 0x0000555555554692 <+8>:	mov    -0x8(%rbp),%rax
   0x0000555555554696 <+12>:	mov    %rax,%rdi
   0x0000555555554699 <+15>:	mov    $0x0,%eax
   0x000055555555469e <+20>:	callq  0x5555555546b6 <allocate>
   0x00005555555546a3 <+25>:	mov    -0x8(%rbp),%rax
   0x00005555555546a7 <+29>:	mov    %rax,%rdi
   0x00005555555546aa <+32>:	callq  0x555555554550 <free@plt>
   0x00005555555546af <+37>:	mov    $0x0,%eax
   0x00005555555546b4 <+42>:	leaveq 
   0x00005555555546b5 <+43>:	retq   
End of assembler dump.
#entering the function
Continuing.

Breakpoint 2, allocate (array=0x0) at sigseg05.c:37
37		int** arrayint = (int**)malloc(n*sizeof(int*));
10: $sp = (void *) 0x7fffffffdec0
12: array = (int **) 0x0
13: /a $bp = 0xffffffffffffdee0
Dump of assembler code for function allocate:
   0x00005555555546b6 <+0>:	push   %rbp
   0x00005555555546b7 <+1>:	mov    %rsp,%rbp
   0x00005555555546ba <+4>:	sub    $0x20,%rsp
   0x00005555555546be <+8>:	mov    %rdi,-0x18(%rbp)
=> 0x00005555555546c2 <+12>:	mov    $0x320,%edi
   0x00005555555546c7 <+17>:	callq  0x555555554560 <malloc@plt>
   0x00005555555546cc <+22>:	mov    %rax,-0x8(%rbp)
   0x00005555555546d0 <+26>:	mov    -0x8(%rbp),%rax
   0x00005555555546d4 <+30>:	mov    %rax,-0x18(%rbp)
   0x00005555555546d8 <+34>:	mov    $0x0,%eax
   0x00005555555546dd <+39>:	leaveq 
   0x00005555555546de <+40>:	retq   
End of assembler dump.
#

#function do work
Continuing.

Breakpoint 3, allocate (array=0x555555756260) at sigseg05.c:39
39		return 0;
10: $sp = (void *) 0x7fffffffdec0
12: array = (int **) 0x555555756260
13: /a $bp = 0xffffffffffffdee0
#

#array!=null so we know malloc successfully finished 

Dump of assembler code for function allocate:
   0x00005555555546b6 <+0>:	push   %rbp
   0x00005555555546b7 <+1>:	mov    %rsp,%rbp
   0x00005555555546ba <+4>:	sub    $0x20,%rsp
   0x00005555555546be <+8>:	mov    %rdi,-0x18(%rbp)
   0x00005555555546c2 <+12>:	mov    $0x320,%edi
   0x00005555555546c7 <+17>:	callq  0x555555554560 <malloc@plt>
   0x00005555555546cc <+22>:	mov    %rax,-0x8(%rbp)
   0x00005555555546d0 <+26>:	mov    -0x8(%rbp),%rax
   0x00005555555546d4 <+30>:	mov    %rax,-0x18(%rbp)
=> 0x00005555555546d8 <+34>:	mov    $0x0,%eax
   0x00005555555546dd <+39>:	leaveq 
   0x00005555555546de <+40>:	retq   
End of assembler dump.
#exiting the function 
Note: breakpoints 4 and 11 also set at pc 0x5555555546a3.
Breakpoint 16 at 0x5555555546a3: file sigseg05.c, line 33.
Continuing.

Breakpoint 4, main () at sigseg05.c:33
33		free(A);
10: $sp = (void *) 0x7fffffffdef0
13: /a $bp = 0xffffffffffffdf00
#

Dump of assembler code for function main:
   0x000055555555468a <+0>:	push   %rbp
   0x000055555555468b <+1>:	mov    %rsp,%rbp
   0x000055555555468e <+4>:	sub    $0x10,%rsp
   0x0000555555554692 <+8>:	mov    -0x8(%rbp),%rax
   0x0000555555554696 <+12>:	mov    %rax,%rdi
   0x0000555555554699 <+15>:	mov    $0x0,%eax
   0x000055555555469e <+20>:	callq  0x5555555546b6 <allocate>
=> 0x00005555555546a3 <+25>:	mov    -0x8(%rbp),%rax
   0x00005555555546a7 <+29>:	mov    %rax,%rdi
   0x00005555555546aa <+32>:	callq  0x555555554550 <free@plt>
   0x00005555555546af <+37>:	mov    $0x0,%eax
   0x00005555555546b4 <+42>:	leaveq 
   0x00005555555546b5 <+43>:	retq   
End of assembler dump.
Continuing.

Breakpoint 12, main () at sigseg05.c:34
34		return 0;
10: $sp = (void *) 0x7fffffffdef0
13: /a $bp = 0xffffffffffffdf00
Dump of assembler code for function main:
   0x000055555555468a <+0>:	push   %rbp
   0x000055555555468b <+1>:	mov    %rsp,%rbp
   0x000055555555468e <+4>:	sub    $0x10,%rsp
   0x0000555555554692 <+8>:	mov    -0x8(%rbp),%rax
   0x0000555555554696 <+12>:	mov    %rax,%rdi
   0x0000555555554699 <+15>:	mov    $0x0,%eax
   0x000055555555469e <+20>:	callq  0x5555555546b6 <allocate>
   0x00005555555546a3 <+25>:	mov    -0x8(%rbp),%rax
   0x00005555555546a7 <+29>:	mov    %rax,%rdi
   0x00005555555546aa <+32>:	callq  0x555555554550 <free@plt>
=> 0x00005555555546af <+37>:	mov    $0x0,%eax
   0x00005555555546b4 <+42>:	leaveq 
   0x00005555555546b5 <+43>:	retq   
End of assembler dump.
#ending the program

Continuing.
[Inferior 1 (process 4076) exited normally]
