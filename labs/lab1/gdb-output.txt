#Pregled source koda.
list
13	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
14	 * GNU General Public License for more details.
15	 * 
16	 * You should have received a copy of the GNU General Public License
17	 * along with this program; if not, write to the Free Software
18	 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
19	 * MA 02110-1301, USA.
20	 * 
21	 * 
22	 */
23	#include <stdio.h> 
24	#include <malloc.h> 
25	int main(void) 
26	{ 
27	    int* p = malloc(8); 
28	    p = 100; 
29	    free(p); 
30	    *p = 110; 
31	    return 0; 
32	} 


#Pokretanje programa!
run
Starting program: /home/dejan/Desktop/PURV/Lab01/Zadatak_zadaca/sigseg 

Program received signal SIGSEGV, Segmentation fault.
__GI___libc_free (mem=0x64) at malloc.c:3103
3103	malloc.c: No such file or directory.
#Kao sto primjecujemo, desava se Segmentation fault.

#Postvaljamo breakpointe.
break main
Breakpoint 1 at 0x692: file sigseg15.c, line 27.
break 28
Breakpoint 2 at 0x6a0: file sigseg15.c, line 28.
break 29
Breakpoint 3 at 0x6a8: file sigseg15.c, line 29.


#Pokrecemo program.
run
Starting program: /home/dejan/Desktop/PURV/Lab01/Zadatak_zadaca/sigseg 

Breakpoint 1, main () at sigseg15.c:27
27	    int* p = malloc(8); 
#Zaustavljamo se na prvom breakpointu!
#Pregled asemblerskog koda(disas/s)!
Dump of assembler code for function main:
sigseg15.c:
26	{ 
   0x000055555555468a <+0>:	push   %rbp
   0x000055555555468b <+1>:	mov    %rsp,%rbp
   0x000055555555468e <+4>:	sub    $0x10,%rsp

27	    int* p = malloc(8); 
=> 0x0000555555554692 <+8>:	mov    $0x8,%edi
   0x0000555555554697 <+13>:	callq  0x555555554560 <malloc@plt>
   0x000055555555469c <+18>:	mov    %rax,-0x8(%rbp)

28	    p = 100; 
   0x00005555555546a0 <+22>:	movq   $0x64,-0x8(%rbp)

29	    free(p); 
   0x00005555555546a8 <+30>:	mov    -0x8(%rbp),%rax
   0x00005555555546ac <+34>:	mov    %rax,%rdi
   0x00005555555546af <+37>:	callq  0x555555554550 <free@plt>

30	    *p = 110; 
   0x00005555555546b4 <+42>:	mov    -0x8(%rbp),%rax
   0x00005555555546b8 <+46>:	movl   $0x6e,(%rax)
Quit

#Nalazimo se u liniji, kojom reg EDI, sto je argument funkcije malloc, punimo brojem bajtova za alokaciju => 8.

#Izvrsicemo i pregled registra edi
info registers $edi
edi            0x1	1

#Sa stepi, idemo naprijed, i ponovo gledamo reg edi.
0x0000555555554697	27	    int* p = malloc(8); 
Dump of assembler code for function main:
   0x000055555555468a <+0>:	push   %rbp
   0x000055555555468b <+1>:	mov    %rsp,%rbp
   0x000055555555468e <+4>:	sub    $0x10,%rsp
   0x0000555555554692 <+8>:	mov    $0x8,%edi
=> 0x0000555555554697 <+13>:	callq  0x555555554560 <malloc@plt>
   0x000055555555469c <+18>:	mov    %rax,-0x8(%rbp)
   0x00005555555546a0 <+22>:	movq   $0x64,-0x8(%rbp)
   0x00005555555546a8 <+30>:	mov    -0x8(%rbp),%rax
   0x00005555555546ac <+34>:	mov    %rax,%rdi
   0x00005555555546af <+37>:	callq  0x555555554550 <free@plt>
   0x00005555555546b4 <+42>:	mov    -0x8(%rbp),%rax
   0x00005555555546b8 <+46>:	movl   $0x6e,(%rax)
   0x00005555555546be <+52>:	mov    $0x0,%eax
   0x00005555555546c3 <+57>:	leaveq 
   0x00005555555546c4 <+58>:	retq   
End of assembler dump.
edi            0x8	8

27	    int* p = malloc(8); 

#Pregled registra RAX, prije izvrsene funkcije za alokaciju.
rax            0x55555555468a	93824992233098

#Sa C, prelazimo na sljedeci breakpoint.
c
Continuing.

Breakpoint 2, main () at sigseg15.c:28
28	    p = 100; 

# RAX, je povratna vrijednost, sto je adresa alociranog bloka!
rax            0x555555756260	93824994337376

#Kako je prva linija uspjesno izvrsena, znaci da je malloc preko RAX registra, vratila vrijednost, sto je adresa mem bloka na heapu, koji je alociran. Samim tim, u pr p, ce se nalaziti ta adresa.
print p
$1 = (int *) 0x555555756260


#Mozemo i da pristupimo toj adresi.
x/bd 0x555555756260
0x555555756260:	0
#Tu je neka vrijednost, u ovom slucaju 0.
0x555555756260:	0
0x555555756261:	0
0x555555756262:	0
0x555555756263:	0
0x555555756264:	0
0x555555756265:	0
0x555555756266:	0

# Da vidimo gdje smo stali.
Dump of assembler code for function main:
   0x000055555555468a <+0>:	push   %rbp
   0x000055555555468b <+1>:	mov    %rsp,%rbp
   0x000055555555468e <+4>:	sub    $0x10,%rsp
   0x0000555555554692 <+8>:	mov    $0x8,%edi
   0x0000555555554697 <+13>:	callq  0x555555554560 <malloc@plt>
   0x000055555555469c <+18>:	mov    %rax,-0x8(%rbp)
=> 0x00005555555546a0 <+22>:	movq   $0x64,-0x8(%rbp)
   0x00005555555546a8 <+30>:	mov    -0x8(%rbp),%rax
   0x00005555555546ac <+34>:	mov    %rax,%rdi
   0x00005555555546af <+37>:	callq  0x555555554550 <free@plt>
   0x00005555555546b4 <+42>:	mov    -0x8(%rbp),%rax
   0x00005555555546b8 <+46>:	movl   $0x6e,(%rax)
   0x00005555555546be <+52>:	mov    $0x0,%eax
   0x00005555555546c3 <+57>:	leaveq 
   0x00005555555546c4 <+58>:	retq   
End of assembler dump.

#Prethodno je vrijednost registra rax, sto predstavlja rezultat izvrsene f-je malloc, a to je zapravo adresa alociranog bloka, prebacena na vrijednost 8b unazad, od vrijednosti smjestene u RBP, odnosno, u promjenjivu p, koja se nalazi na toj adresi, kao sto je receno.

#Sada smo na liniji, kojom vrijednost 100, upisujemo u promjenjivu p, sto je kao sto smo vec rekli, 8b unazad, od pocetne lokacije smjestene unutar Base Pointer registra.
#Pregled promjenjive p
print p
$2 = (int *) 0x555555756260
#Nakon izvrsenog stepi...
stepi

Breakpoint 3, main () at sigseg15.c:29
29	    free(p); 
Dump of assembler code for function main:
   0x000055555555468a <+0>:	push   %rbp
   0x000055555555468b <+1>:	mov    %rsp,%rbp
   0x000055555555468e <+4>:	sub    $0x10,%rsp
   0x0000555555554692 <+8>:	mov    $0x8,%edi
   0x0000555555554697 <+13>:	callq  0x555555554560 <malloc@plt>
   0x000055555555469c <+18>:	mov    %rax,-0x8(%rbp)
   0x00005555555546a0 <+22>:	movq   $0x64,-0x8(%rbp)
=> 0x00005555555546a8 <+30>:	mov    -0x8(%rbp),%rax
   0x00005555555546ac <+34>:	mov    %rax,%rdi
   0x00005555555546af <+37>:	callq  0x555555554550 <free@plt>
   0x00005555555546b4 <+42>:	mov    -0x8(%rbp),%rax
   0x00005555555546b8 <+46>:	movl   $0x6e,(%rax)
   0x00005555555546be <+52>:	mov    $0x0,%eax
   0x00005555555546c3 <+57>:	leaveq 
   0x00005555555546c4 <+58>:	retq   
End of assembler dump.
print p
$3 = (int *) 0x64
#Vidimo da je tu sada vrijednost 64h = 100d!


#SAdrzaj promjenjive p, se dalje prebacuje u registar RAX!
info registers $rax
rax            0x555555756260	93824994337376
stepi
0x00005555555546ac	29	    free(p); 
rax            0x64	100


Dump of assembler code for function main:
   0x000055555555468a <+0>:	push   %rbp
   0x000055555555468b <+1>:	mov    %rsp,%rbp
   0x000055555555468e <+4>:	sub    $0x10,%rsp
   0x0000555555554692 <+8>:	mov    $0x8,%edi
   0x0000555555554697 <+13>:	callq  0x555555554560 <malloc@plt>
   0x000055555555469c <+18>:	mov    %rax,-0x8(%rbp)
   0x00005555555546a0 <+22>:	movq   $0x64,-0x8(%rbp)
   0x00005555555546a8 <+30>:	mov    -0x8(%rbp),%rax
=> 0x00005555555546ac <+34>:	mov    %rax,%rdi
   0x00005555555546af <+37>:	callq  0x555555554550 <free@plt>
   0x00005555555546b4 <+42>:	mov    -0x8(%rbp),%rax
   0x00005555555546b8 <+46>:	movl   $0x6e,(%rax)
   0x00005555555546be <+52>:	mov    $0x0,%eax
   0x00005555555546c3 <+57>:	leaveq 
   0x00005555555546c4 <+58>:	retq   
End of assembler dump.
#Zatim imamo poziv funkcije free, koja zahtijeva da kao argument primi adresu bloka na heapu, koji se dealocira, sto zahtjeva prebacivanje u registar RDI(Argument prilikom poziva f-je!).
#Pregled RDI prije prebacivanja(Neka stara vrijednost):
Invalid register `#rdi'
rdi            0x555555756270	93824994337392

#Nakon stepa:
0x00005555555546af	29	    free(p); 
Dump of assembler code for function main:
   0x000055555555468a <+0>:	push   %rbp
   0x000055555555468b <+1>:	mov    %rsp,%rbp
   0x000055555555468e <+4>:	sub    $0x10,%rsp
   0x0000555555554692 <+8>:	mov    $0x8,%edi
   0x0000555555554697 <+13>:	callq  0x555555554560 <malloc@plt>
   0x000055555555469c <+18>:	mov    %rax,-0x8(%rbp)
   0x00005555555546a0 <+22>:	movq   $0x64,-0x8(%rbp)
   0x00005555555546a8 <+30>:	mov    -0x8(%rbp),%rax
   0x00005555555546ac <+34>:	mov    %rax,%rdi
=> 0x00005555555546af <+37>:	callq  0x555555554550 <free@plt>
   0x00005555555546b4 <+42>:	mov    -0x8(%rbp),%rax
   0x00005555555546b8 <+46>:	movl   $0x6e,(%rax)
   0x00005555555546be <+52>:	mov    $0x0,%eax
   0x00005555555546c3 <+57>:	leaveq 
   0x00005555555546c4 <+58>:	retq   
End of assembler dump.
rdi            0x64	100
#Imamo adresu bloka koji se treba dealocirati.


#Slijedi izvrsavanje f-je free.
0x0000555555554550 in free@plt ()
Dump of assembler code for function free@plt:
=> 0x0000555555554550 <+0>:	jmpq   *0x200a72(%rip)        # 0x555555754fc8
   0x0000555555554556 <+6>:	pushq  $0x0
   0x000055555555455b <+11>:	jmpq   0x555555554540
End of assembler dump.

# Imamo R registre, cije vrijednosti treba da budu nepromjenjene po izlasku iz f-je, te se one pushaju na stek.
# Pored toga, imamo pushovanje i nekih drugih registara, razmjenu njihovih vrijednosti, i slicno.
# Ono sto je bitno, u registru RDI, nalazi se adresa mem bloka, koji treba da se dealocira.
__GI___libc_free (mem=0x64) at malloc.c:3086
3086	malloc.c: No such file or directory.
Dump of assembler code for function __GI___libc_free:
=> 0x00007ffff7a7b950 <+0>:	push   %r15
   0x00007ffff7a7b952 <+2>:	push   %r14
   0x00007ffff7a7b954 <+4>:	push   %r13
   0x00007ffff7a7b956 <+6>:	push   %r12
   0x00007ffff7a7b958 <+8>:	mov    %rdi,%r12
   0x00007ffff7a7b95b <+11>:	push   %rbp
   0x00007ffff7a7b95c <+12>:	push   %rbx
   0x00007ffff7a7b95d <+13>:	sub    $0x38,%rsp
   0x00007ffff7a7b961 <+17>:	mov    %fs:0x28,%rax
   0x00007ffff7a7b96a <+26>:	mov    %rax,0x28(%rsp)
   0x00007ffff7a7b96f <+31>:	xor    %eax,%eax
   0x00007ffff7a7b971 <+33>:	mov    0x353570(%rip),%rax        # 0x7ffff7dceee8
   0x00007ffff7a7b978 <+40>:	mov    (%rax),%rax
   0x00007ffff7a7b97b <+43>:	test   %rax,%rax
   0x00007ffff7a7b97e <+46>:	jne    0x7ffff7a7bc20 <__GI___libc_free+720>
   0x00007ffff7a7b984 <+52>:	test   %rdi,%rdi
   0x00007ffff7a7b987 <+55>:	je     0x7ffff7a7baa0 <__GI___libc_free+336>
   0x00007ffff7a7b98d <+61>:	mov    -0x8(%rdi),%rsi
   0x00007ffff7a7b991 <+65>:	lea    -0x10(%rdi),%r13
   0x00007ffff7a7b995 <+69>:	test   $0x2,%sil
   0x00007ffff7a7b999 <+73>:	jne    0x7ffff7a7bac8 <__GI___libc_free+376>
Quit
0x00007ffff7a7b952	3086	in malloc.c
Dump of assembler code for function __GI___libc_free:
   0x00007ffff7a7b950 <+0>:	push   %r15
=> 0x00007ffff7a7b952 <+2>:	push   %r14
   0x00007ffff7a7b954 <+4>:	push   %r13
   0x00007ffff7a7b956 <+6>:	push   %r12
   0x00007ffff7a7b958 <+8>:	mov    %rdi,%r12
   0x00007ffff7a7b95b <+11>:	push   %rbp
   0x00007ffff7a7b95c <+12>:	push   %rbx
   0x00007ffff7a7b95d <+13>:	sub    $0x38,%rsp
   0x00007ffff7a7b961 <+17>:	mov    %fs:0x28,%rax
   0x00007ffff7a7b96a <+26>:	mov    %rax,0x28(%rsp)
   0x00007ffff7a7b96f <+31>:	xor    %eax,%eax
   0x00007ffff7a7b971 <+33>:	mov    0x353570(%rip),%rax        # 0x7ffff7dceee8
   0x00007ffff7a7b978 <+40>:	mov    (%rax),%rax
   0x00007ffff7a7b97b <+43>:	test   %rax,%rax
   0x00007ffff7a7b97e <+46>:	jne    0x7ffff7a7bc20 <__GI___libc_free+720>
   0x00007ffff7a7b984 <+52>:	test   %rdi,%rdi
   0x00007ffff7a7b987 <+55>:	je     0x7ffff7a7baa0 <__GI___libc_free+336>
   0x00007ffff7a7b98d <+61>:	mov    -0x8(%rdi),%rsi
   0x00007ffff7a7b991 <+65>:	lea    -0x10(%rdi),%r13
   0x00007ffff7a7b995 <+69>:	test   $0x2,%sil
   0x00007ffff7a7b999 <+73>:	jne    0x7ffff7a7bac8 <__GI___libc_free+376>
Quit
0x00007ffff7a7b954	3086	in malloc.c
Dump of assembler code for function __GI___libc_free:
   0x00007ffff7a7b950 <+0>:	push   %r15
   0x00007ffff7a7b952 <+2>:	push   %r14
=> 0x00007ffff7a7b954 <+4>:	push   %r13
   0x00007ffff7a7b956 <+6>:	push   %r12
   0x00007ffff7a7b958 <+8>:	mov    %rdi,%r12
   0x00007ffff7a7b95b <+11>:	push   %rbp
   0x00007ffff7a7b95c <+12>:	push   %rbx
   0x00007ffff7a7b95d <+13>:	sub    $0x38,%rsp
   0x00007ffff7a7b961 <+17>:	mov    %fs:0x28,%rax
   0x00007ffff7a7b96a <+26>:	mov    %rax,0x28(%rsp)
   0x00007ffff7a7b96f <+31>:	xor    %eax,%eax
   0x00007ffff7a7b971 <+33>:	mov    0x353570(%rip),%rax        # 0x7ffff7dceee8
   0x00007ffff7a7b978 <+40>:	mov    (%rax),%rax
   0x00007ffff7a7b97b <+43>:	test   %rax,%rax
   0x00007ffff7a7b97e <+46>:	jne    0x7ffff7a7bc20 <__GI___libc_free+720>
   0x00007ffff7a7b984 <+52>:	test   %rdi,%rdi
   0x00007ffff7a7b987 <+55>:	je     0x7ffff7a7baa0 <__GI___libc_free+336>
   0x00007ffff7a7b98d <+61>:	mov    -0x8(%rdi),%rsi
   0x00007ffff7a7b991 <+65>:	lea    -0x10(%rdi),%r13
   0x00007ffff7a7b995 <+69>:	test   $0x2,%sil
   0x00007ffff7a7b999 <+73>:	jne    0x7ffff7a7bac8 <__GI___libc_free+376>
Quit
0x00007ffff7a7b956	3086	in malloc.c
Dump of assembler code for function __GI___libc_free:
   0x00007ffff7a7b950 <+0>:	push   %r15
   0x00007ffff7a7b952 <+2>:	push   %r14
   0x00007ffff7a7b954 <+4>:	push   %r13
=> 0x00007ffff7a7b956 <+6>:	push   %r12
   0x00007ffff7a7b958 <+8>:	mov    %rdi,%r12
   0x00007ffff7a7b95b <+11>:	push   %rbp
   0x00007ffff7a7b95c <+12>:	push   %rbx
   0x00007ffff7a7b95d <+13>:	sub    $0x38,%rsp
   0x00007ffff7a7b961 <+17>:	mov    %fs:0x28,%rax
   0x00007ffff7a7b96a <+26>:	mov    %rax,0x28(%rsp)
   0x00007ffff7a7b96f <+31>:	xor    %eax,%eax
   0x00007ffff7a7b971 <+33>:	mov    0x353570(%rip),%rax        # 0x7ffff7dceee8
   0x00007ffff7a7b978 <+40>:	mov    (%rax),%rax
   0x00007ffff7a7b97b <+43>:	test   %rax,%rax
   0x00007ffff7a7b97e <+46>:	jne    0x7ffff7a7bc20 <__GI___libc_free+720>
   0x00007ffff7a7b984 <+52>:	test   %rdi,%rdi
   0x00007ffff7a7b987 <+55>:	je     0x7ffff7a7baa0 <__GI___libc_free+336>
   0x00007ffff7a7b98d <+61>:	mov    -0x8(%rdi),%rsi
   0x00007ffff7a7b991 <+65>:	lea    -0x10(%rdi),%r13
   0x00007ffff7a7b995 <+69>:	test   $0x2,%sil
   0x00007ffff7a7b999 <+73>:	jne    0x7ffff7a7bac8 <__GI___libc_free+376>
Quit
0x00007ffff7a7b96f	3086	in malloc.c
Dump of assembler code for function __GI___libc_free:
   0x00007ffff7a7b950 <+0>:	push   %r15
   0x00007ffff7a7b952 <+2>:	push   %r14
   0x00007ffff7a7b954 <+4>:	push   %r13
   0x00007ffff7a7b956 <+6>:	push   %r12
   0x00007ffff7a7b958 <+8>:	mov    %rdi,%r12
   0x00007ffff7a7b95b <+11>:	push   %rbp
   0x00007ffff7a7b95c <+12>:	push   %rbx
   0x00007ffff7a7b95d <+13>:	sub    $0x38,%rsp
   0x00007ffff7a7b961 <+17>:	mov    %fs:0x28,%rax
   0x00007ffff7a7b96a <+26>:	mov    %rax,0x28(%rsp)
=> 0x00007ffff7a7b96f <+31>:	xor    %eax,%eax
   0x00007ffff7a7b971 <+33>:	mov    0x353570(%rip),%rax        # 0x7ffff7dceee8
   0x00007ffff7a7b978 <+40>:	mov    (%rax),%rax
   0x00007ffff7a7b97b <+43>:	test   %rax,%rax
   0x00007ffff7a7b97e <+46>:	jne    0x7ffff7a7bc20 <__GI___libc_free+720>
   0x00007ffff7a7b984 <+52>:	test   %rdi,%rdi
   0x00007ffff7a7b987 <+55>:	je     0x7ffff7a7baa0 <__GI___libc_free+336>
   0x00007ffff7a7b98d <+61>:	mov    -0x8(%rdi),%rsi
   0x00007ffff7a7b991 <+65>:	lea    -0x10(%rdi),%r13
   0x00007ffff7a7b995 <+69>:	test   $0x2,%sil
   0x00007ffff7a7b999 <+73>:	jne    0x7ffff7a7bac8 <__GI___libc_free+376>
Quit
3092	in malloc.c
Dump of assembler code for function __GI___libc_free:
   0x00007ffff7a7b950 <+0>:	push   %r15
   0x00007ffff7a7b952 <+2>:	push   %r14
   0x00007ffff7a7b954 <+4>:	push   %r13
   0x00007ffff7a7b956 <+6>:	push   %r12
   0x00007ffff7a7b958 <+8>:	mov    %rdi,%r12
   0x00007ffff7a7b95b <+11>:	push   %rbp
   0x00007ffff7a7b95c <+12>:	push   %rbx
   0x00007ffff7a7b95d <+13>:	sub    $0x38,%rsp
   0x00007ffff7a7b961 <+17>:	mov    %fs:0x28,%rax
   0x00007ffff7a7b96a <+26>:	mov    %rax,0x28(%rsp)
   0x00007ffff7a7b96f <+31>:	xor    %eax,%eax
   0x00007ffff7a7b971 <+33>:	mov    0x353570(%rip),%rax        # 0x7ffff7dceee8
   0x00007ffff7a7b978 <+40>:	mov    (%rax),%rax
=> 0x00007ffff7a7b97b <+43>:	test   %rax,%rax
   0x00007ffff7a7b97e <+46>:	jne    0x7ffff7a7bc20 <__GI___libc_free+720>
   0x00007ffff7a7b984 <+52>:	test   %rdi,%rdi
   0x00007ffff7a7b987 <+55>:	je     0x7ffff7a7baa0 <__GI___libc_free+336>
   0x00007ffff7a7b98d <+61>:	mov    -0x8(%rdi),%rsi
   0x00007ffff7a7b991 <+65>:	lea    -0x10(%rdi),%r13
   0x00007ffff7a7b995 <+69>:	test   $0x2,%sil
   0x00007ffff7a7b999 <+73>:	jne    0x7ffff7a7bac8 <__GI___libc_free+376>
Quit
0x00007ffff7a7b97e	3092	in malloc.c
Dump of assembler code for function __GI___libc_free:
   0x00007ffff7a7b950 <+0>:	push   %r15
   0x00007ffff7a7b952 <+2>:	push   %r14
   0x00007ffff7a7b954 <+4>:	push   %r13
   0x00007ffff7a7b956 <+6>:	push   %r12
   0x00007ffff7a7b958 <+8>:	mov    %rdi,%r12
   0x00007ffff7a7b95b <+11>:	push   %rbp
   0x00007ffff7a7b95c <+12>:	push   %rbx
   0x00007ffff7a7b95d <+13>:	sub    $0x38,%rsp
   0x00007ffff7a7b961 <+17>:	mov    %fs:0x28,%rax
   0x00007ffff7a7b96a <+26>:	mov    %rax,0x28(%rsp)
   0x00007ffff7a7b96f <+31>:	xor    %eax,%eax
   0x00007ffff7a7b971 <+33>:	mov    0x353570(%rip),%rax        # 0x7ffff7dceee8
   0x00007ffff7a7b978 <+40>:	mov    (%rax),%rax
   0x00007ffff7a7b97b <+43>:	test   %rax,%rax
=> 0x00007ffff7a7b97e <+46>:	jne    0x7ffff7a7bc20 <__GI___libc_free+720>
   0x00007ffff7a7b984 <+52>:	test   %rdi,%rdi
   0x00007ffff7a7b987 <+55>:	je     0x7ffff7a7baa0 <__GI___libc_free+336>
   0x00007ffff7a7b98d <+61>:	mov    -0x8(%rdi),%rsi
   0x00007ffff7a7b991 <+65>:	lea    -0x10(%rdi),%r13
   0x00007ffff7a7b995 <+69>:	test   $0x2,%sil
   0x00007ffff7a7b999 <+73>:	jne    0x7ffff7a7bac8 <__GI___libc_free+376>
Quit
3098	in malloc.c
Dump of assembler code for function __GI___libc_free:
   0x00007ffff7a7b950 <+0>:	push   %r15
   0x00007ffff7a7b952 <+2>:	push   %r14
   0x00007ffff7a7b954 <+4>:	push   %r13
   0x00007ffff7a7b956 <+6>:	push   %r12
   0x00007ffff7a7b958 <+8>:	mov    %rdi,%r12
   0x00007ffff7a7b95b <+11>:	push   %rbp
   0x00007ffff7a7b95c <+12>:	push   %rbx
   0x00007ffff7a7b95d <+13>:	sub    $0x38,%rsp
   0x00007ffff7a7b961 <+17>:	mov    %fs:0x28,%rax
   0x00007ffff7a7b96a <+26>:	mov    %rax,0x28(%rsp)
   0x00007ffff7a7b96f <+31>:	xor    %eax,%eax
   0x00007ffff7a7b971 <+33>:	mov    0x353570(%rip),%rax        # 0x7ffff7dceee8
   0x00007ffff7a7b978 <+40>:	mov    (%rax),%rax
   0x00007ffff7a7b97b <+43>:	test   %rax,%rax
   0x00007ffff7a7b97e <+46>:	jne    0x7ffff7a7bc20 <__GI___libc_free+720>
=> 0x00007ffff7a7b984 <+52>:	test   %rdi,%rdi
   0x00007ffff7a7b987 <+55>:	je     0x7ffff7a7baa0 <__GI___libc_free+336>
   0x00007ffff7a7b98d <+61>:	mov    -0x8(%rdi),%rsi
   0x00007ffff7a7b991 <+65>:	lea    -0x10(%rdi),%r13
   0x00007ffff7a7b995 <+69>:	test   $0x2,%sil
   0x00007ffff7a7b999 <+73>:	jne    0x7ffff7a7bac8 <__GI___libc_free+376>
Quit
0x00007ffff7a7b987	3098	in malloc.c
Dump of assembler code for function __GI___libc_free:
   0x00007ffff7a7b950 <+0>:	push   %r15
   0x00007ffff7a7b952 <+2>:	push   %r14
   0x00007ffff7a7b954 <+4>:	push   %r13
   0x00007ffff7a7b956 <+6>:	push   %r12
   0x00007ffff7a7b958 <+8>:	mov    %rdi,%r12
   0x00007ffff7a7b95b <+11>:	push   %rbp
   0x00007ffff7a7b95c <+12>:	push   %rbx
   0x00007ffff7a7b95d <+13>:	sub    $0x38,%rsp
   0x00007ffff7a7b961 <+17>:	mov    %fs:0x28,%rax
   0x00007ffff7a7b96a <+26>:	mov    %rax,0x28(%rsp)
   0x00007ffff7a7b96f <+31>:	xor    %eax,%eax
   0x00007ffff7a7b971 <+33>:	mov    0x353570(%rip),%rax        # 0x7ffff7dceee8
   0x00007ffff7a7b978 <+40>:	mov    (%rax),%rax
   0x00007ffff7a7b97b <+43>:	test   %rax,%rax
   0x00007ffff7a7b97e <+46>:	jne    0x7ffff7a7bc20 <__GI___libc_free+720>
   0x00007ffff7a7b984 <+52>:	test   %rdi,%rdi
=> 0x00007ffff7a7b987 <+55>:	je     0x7ffff7a7baa0 <__GI___libc_free+336>
   0x00007ffff7a7b98d <+61>:	mov    -0x8(%rdi),%rsi
   0x00007ffff7a7b991 <+65>:	lea    -0x10(%rdi),%r13
   0x00007ffff7a7b995 <+69>:	test   $0x2,%sil
   0x00007ffff7a7b999 <+73>:	jne    0x7ffff7a7bac8 <__GI___libc_free+376>
Quit
3103	in malloc.c
Dump of assembler code for function __GI___libc_free:
   0x00007ffff7a7b950 <+0>:	push   %r15
   0x00007ffff7a7b952 <+2>:	push   %r14
   0x00007ffff7a7b954 <+4>:	push   %r13
   0x00007ffff7a7b956 <+6>:	push   %r12
   0x00007ffff7a7b958 <+8>:	mov    %rdi,%r12
   0x00007ffff7a7b95b <+11>:	push   %rbp
   0x00007ffff7a7b95c <+12>:	push   %rbx
   0x00007ffff7a7b95d <+13>:	sub    $0x38,%rsp
   0x00007ffff7a7b961 <+17>:	mov    %fs:0x28,%rax
   0x00007ffff7a7b96a <+26>:	mov    %rax,0x28(%rsp)
   0x00007ffff7a7b96f <+31>:	xor    %eax,%eax
   0x00007ffff7a7b971 <+33>:	mov    0x353570(%rip),%rax        # 0x7ffff7dceee8
   0x00007ffff7a7b978 <+40>:	mov    (%rax),%rax
   0x00007ffff7a7b97b <+43>:	test   %rax,%rax
   0x00007ffff7a7b97e <+46>:	jne    0x7ffff7a7bc20 <__GI___libc_free+720>
   0x00007ffff7a7b984 <+52>:	test   %rdi,%rdi
   0x00007ffff7a7b987 <+55>:	je     0x7ffff7a7baa0 <__GI___libc_free+336>
=> 0x00007ffff7a7b98d <+61>:	mov    -0x8(%rdi),%rsi
   0x00007ffff7a7b991 <+65>:	lea    -0x10(%rdi),%r13
   0x00007ffff7a7b995 <+69>:	test   $0x2,%sil
   0x00007ffff7a7b999 <+73>:	jne    0x7ffff7a7bac8 <__GI___libc_free+376>
Quit

Program received signal SIGSEGV, Segmentation fault.
__GI___libc_free (mem=0x64) at malloc.c:3103
3103	in malloc.c
#Desava se Segmentation fault, usljed pokusaja pristupa memorijskoj lokaciji sa adresom 100.

# Kriticna linija:
	=> 0x00007ffff7a7b98d <+61>:	mov    -0x8(%rdi),%rsi
# Na pocetku smo alocirali 8B. Pocetna vrijednost bloka, nalazi se u rdi. Imamo pokusaj pristupa 8B unazad, mem lokacije 0x64 = 100d, sto ce dovesti do greske, jer se zahtijeva pristup adresi, kojoj ne bismo trebali imati pristup.

#Promjenom koda, na dole prikazan nacin, izbjegavamo Segm Fault, i omogucavamo korektno izvrsavanje programa.

13	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
14	 * GNU General Public License for more details.
15	 * 
16	 * You should have received a copy of the GNU General Public License
17	 * along with this program; if not, write to the Free Software
18	 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
19	 * MA 02110-1301, USA.
20	 * 
21	 * 
22	 */
23	#include <stdio.h> 
24	#include <malloc.h> 
25	int main(void) 
26	{ 
27	    int* p = malloc(8); 
28	    	//p = 100; 
29	    *p = 110; 
30	    free(p); 
31	    return 0; 
32	}

# Markiranjem linije broj 28, cime promjenjiva p, zadrzava vrijednost adrese mem. bloka na heapu, koji je alociran, izbjegavamo SF-ault!
# Umjesto markiranja, tu smo mogli staviti *p=100, sto bi radilo pristup mem lokaciji na koju pokazuje p, i upis vrijednosti 100.
# Dodatno, na prethodnoj verziji, funkcija free, se pozivala prije nego je izvrseno upisivanjne vrijednosti 110 u alocirani mem. blok. Ovakvo izvrsavanje, nece izazvati u ovom slucaju problem, jer nemamo nikakvih drugih alokacija, cime bi doslo do maskiranja.
# Ono sto je naravno zanimljivo, je da ce f-ja free(), izvrsiti dealokaciju, medjutim, ako u narednoj liniji, promjenjivu ne postavimo na null, ona ce i dalje pokazivati na tu mem. lokaciju na heapu.Problem, sa konzistentnoscu podataka, kao sto sam naveo, ce se javiti ukoliko ubacimo novu promjenjivu, naknadno, izvrsimo alokaciju, moze se desiti da OS alocira upravo isti taj dio memorije, i dodijeli toj drugoj promjenjivoj. Preko prve promjenjive, i dalje mozemo pristupati memoriji na heapu, ali taj novoalocirani blok memorije, vise njoj ne pripada!
# U skladu sa tim, najbolje je free() prebaciti na kraj, i jos dodatno uvesti p=NULL, cime osiguravamo konzistentnost heap-a!

#Nakon korekcije:
Breakpoint 1 at 0x692: file sigseg15.c, line 27.
Breakpoint 2 at 0x6a0: file sigseg15.c, line 29.
Breakpoint 3 at 0x6aa: file sigseg15.c, line 30.
Breakpoint 4 at 0x6b6: file sigseg15.c, line 31.
Breakpoint 5 at 0x6be: file sigseg15.c, line 32.
Starting program: /home/dejan/Desktop/PURV/Lab01/Zadatak_zadaca/sigseg 

Breakpoint 1, main () at sigseg15.c:27
27	    int* p = malloc(8); 
rax            0x55555555468a	93824992233098
Continuing.

Breakpoint 2, main () at sigseg15.c:29
29	    *p = 110; 
rax            0x555555756260	93824994337376
Continuing.

Breakpoint 3, main () at sigseg15.c:30
30	    free(p);
$1 = (int *) 0x555555756260

# Pregled sadrzaja mem lokacije(Da se uvjerimo da imamo uspjesan upis!)
0x555555756260:	110
Quit

# Vrijednost  110 je upisana na lokaciju, na koju pokazuje p.
#Zatim radimo oslobadjanje bloka!
Continuing.

# p prije postavljanja NULL-a!
Breakpoint 4, main () at sigseg15.c:31
31		p = NULL; 
Note: breakpoint 5 also set at pc 0x5555555546be.
Breakpoint 6 at 0x5555555546be: file sigseg15.c, line 32.
$2 = (int *) 0x555555756260

# Nakon sto p postavimo na NULL!
Breakpoint 5, main () at sigseg15.c:32
32	    return 0; 
$4 = (int *) 0x0


# Jos jedna mogucnost regulisanja programskog koda, kojom ne radimo nikakvo markiranje, vec umjesto dodjele adrese, radimo upis vrijednosti na postojecu adresu.
list
13	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
14	 * GNU General Public License for more details.
15	 * 
16	 * You should have received a copy of the GNU General Public License
17	 * along with this program; if not, write to the Free Software
18	 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
19	 * MA 02110-1301, USA.
20	 * 
21	 * 
22	 */
23	#include <stdio.h> 
24	#include <malloc.h> 
25	int main(void) 
26	{ 
27	    int* p = malloc(8); 
28	    *p = 100; 
29	    *p = 110; 
30	    free(p);
31		p = NULL; 
32	    return 0; 


# Ono sto je na neki nacin nezanimljivo, je sto cemo imati prepisivanje sadrzaja, 110, na upisanu vrijednost 100.


Breakpoint 1 at 0x692: file sigseg15.c, line 27.
Breakpoint 2 at 0x6b4: file sigseg15.c, line 30.
Breakpoint 3 at 0x6c0: file sigseg15.c, line 31.


#Pokretanje:(RUN)Starting program: /home/dejan/Desktop/PURV/Lab01/Zadatak_zadaca/sigseg 

Breakpoint 1, main () at sigseg15.c:27
27	    int* p = malloc(8); 


Dump of assembler code for function main:
   0x000055555555468a <+0>:	push   %rbp
   0x000055555555468b <+1>:	mov    %rsp,%rbp
   0x000055555555468e <+4>:	sub    $0x10,%rsp
=> 0x0000555555554692 <+8>:	mov    $0x8,%edi
   0x0000555555554697 <+13>:	callq  0x555555554560 <malloc@plt>
   0x000055555555469c <+18>:	mov    %rax,-0x8(%rbp)
   0x00005555555546a0 <+22>:	mov    -0x8(%rbp),%rax
   0x00005555555546a4 <+26>:	movl   $0x64,(%rax)
   0x00005555555546aa <+32>:	mov    -0x8(%rbp),%rax
   0x00005555555546ae <+36>:	movl   $0x6e,(%rax)
   0x00005555555546b4 <+42>:	mov    -0x8(%rbp),%rax
   0x00005555555546b8 <+46>:	mov    %rax,%rdi
   0x00005555555546bb <+49>:	callq  0x555555554550 <free@plt>
   0x00005555555546c0 <+54>:	movq   $0x0,-0x8(%rbp)
   0x00005555555546c8 <+62>:	mov    $0x0,%eax
   0x00005555555546cd <+67>:	leaveq 
   0x00005555555546ce <+68>:	retq   
End of assembler dump.


Breakpoint 4 at 0x5555555546a0: file sigseg15.c, line 28.


Continuing.

Breakpoint 4, main () at sigseg15.c:28
28	    *p = 100; 


Dump of assembler code for function main:
   0x000055555555468a <+0>:	push   %rbp
   0x000055555555468b <+1>:	mov    %rsp,%rbp
   0x000055555555468e <+4>:	sub    $0x10,%rsp
   0x0000555555554692 <+8>:	mov    $0x8,%edi
   0x0000555555554697 <+13>:	callq  0x555555554560 <malloc@plt>
   0x000055555555469c <+18>:	mov    %rax,-0x8(%rbp)
=> 0x00005555555546a0 <+22>:	mov    -0x8(%rbp),%rax
   0x00005555555546a4 <+26>:	movl   $0x64,(%rax)
   0x00005555555546aa <+32>:	mov    -0x8(%rbp),%rax
   0x00005555555546ae <+36>:	movl   $0x6e,(%rax)
   0x00005555555546b4 <+42>:	mov    -0x8(%rbp),%rax
   0x00005555555546b8 <+46>:	mov    %rax,%rdi
   0x00005555555546bb <+49>:	callq  0x555555554550 <free@plt>
   0x00005555555546c0 <+54>:	movq   $0x0,-0x8(%rbp)
   0x00005555555546c8 <+62>:	mov    $0x0,%eax
   0x00005555555546cd <+67>:	leaveq 
   0x00005555555546ce <+68>:	retq   
End of assembler dump.


#Alokacija izvrsena, zatim slijedi upis vrijednosti na tu mem. lok.
0x00005555555546a4	28	    *p = 100; 
Dump of assembler code for function main:
   0x000055555555468a <+0>:	push   %rbp
   0x000055555555468b <+1>:	mov    %rsp,%rbp
   0x000055555555468e <+4>:	sub    $0x10,%rsp
   0x0000555555554692 <+8>:	mov    $0x8,%edi
   0x0000555555554697 <+13>:	callq  0x555555554560 <malloc@plt>
   0x000055555555469c <+18>:	mov    %rax,-0x8(%rbp)
   0x00005555555546a0 <+22>:	mov    -0x8(%rbp),%rax
=> 0x00005555555546a4 <+26>:	movl   $0x64,(%rax)
   0x00005555555546aa <+32>:	mov    -0x8(%rbp),%rax
   0x00005555555546ae <+36>:	movl   $0x6e,(%rax)
   0x00005555555546b4 <+42>:	mov    -0x8(%rbp),%rax
   0x00005555555546b8 <+46>:	mov    %rax,%rdi
   0x00005555555546bb <+49>:	callq  0x555555554550 <free@plt>
   0x00005555555546c0 <+54>:	movq   $0x0,-0x8(%rbp)
   0x00005555555546c8 <+62>:	mov    $0x0,%eax
   0x00005555555546cd <+67>:	leaveq 
   0x00005555555546ce <+68>:	retq   
End of assembler dump.
#Print p:
$1 = (int *) 0x555555756260


0x555555756260:	0
0x555555756261:	0
0x555555756262:	0
0x555555756263:	0


29	    *p = 110; 


0x555555756260:	100
#Imamo upisanu vrijednost 100.


Dump of assembler code for function main:
   0x000055555555468a <+0>:	push   %rbp
   0x000055555555468b <+1>:	mov    %rsp,%rbp
   0x000055555555468e <+4>:	sub    $0x10,%rsp
   0x0000555555554692 <+8>:	mov    $0x8,%edi
   0x0000555555554697 <+13>:	callq  0x555555554560 <malloc@plt>
   0x000055555555469c <+18>:	mov    %rax,-0x8(%rbp)
   0x00005555555546a0 <+22>:	mov    -0x8(%rbp),%rax
   0x00005555555546a4 <+26>:	movl   $0x64,(%rax)
=> 0x00005555555546aa <+32>:	mov    -0x8(%rbp),%rax
   0x00005555555546ae <+36>:	movl   $0x6e,(%rax)
   0x00005555555546b4 <+42>:	mov    -0x8(%rbp),%rax
   0x00005555555546b8 <+46>:	mov    %rax,%rdi
   0x00005555555546bb <+49>:	callq  0x555555554550 <free@plt>
   0x00005555555546c0 <+54>:	movq   $0x0,-0x8(%rbp)
   0x00005555555546c8 <+62>:	mov    $0x0,%eax
   0x00005555555546cd <+67>:	leaveq 
   0x00005555555546ce <+68>:	retq   
End of assembler dump.



Breakpoint 2, main () at sigseg15.c:30
30	    free(p);


0x555555756260:	110


Continuing.

Breakpoint 3, main () at sigseg15.c:31
31		p = NULL; 
32	    return 0; 
$2 = (int *) 0x0
